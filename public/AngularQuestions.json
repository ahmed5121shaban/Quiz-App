{
  "quizAngular": {
    "title": "Angular Interview Questions",
    "image":"images/angular-icon-svgrepo-com.svg",
    "questions": [
      {
        "id": 1,
        "question": "What is Angular?",
        "options": [
          "A programming language",
          "A front-end web framework",
          "A database management system",
          "A type of operating system"
        ],
        "answer": "A front-end web framework"
      },
      {
        "id": 2,
        "question": "Which directive is used to create a two-way data binding in Angular?",
        "options": [
          "ngBind",
          "ngModel",
          "ngInit",
          "ngRepeat"
        ],
        "answer": "ngModel"
      },
      {
        "id": 3,
        "question": "What is a decorator in Angular?",
        "options": [
          "A function that adds metadata to a class, its members, or its method arguments",
          "A way to write inline styles",
          "A design pattern to manage state",
          "A tool for handling HTTP requests"
        ],
        "answer": "A function that adds metadata to a class, its members, or its method arguments"
      },
      {
        "id": 4,
        "question": "What is the purpose of Angular CLI?",
        "options": [
          "To create Angular components",
          "To compile TypeScript into JavaScript",
          "To automate the development process",
          "To connect Angular applications to a database"
        ],
        "answer": "To automate the development process"
      },
      {
        "id": 5,
        "question": "What is the use of ngOnInit in Angular?",
        "options": [
          "To perform complex initialization logic in a component",
          "To initialize variables with default values",
          "To create a new service",
          "To define routes"
        ],
        "answer": "To perform complex initialization logic in a component"
      },
      {
        "id": 6,
        "question": "Which of the following is true about Angular services?",
        "options": [
          "They are used to manage data logic across the application",
          "They are used to create UI components",
          "They handle user inputs in Angular forms",
          "They are used to perform HTTP requests"
        ],
        "answer": "They are used to manage data logic across the application"
      },
      {
        "id": 7,
        "question": "What is RxJS in Angular?",
        "options": [
          "A routing module",
          "A library for reactive programming using observables",
          "A debugging tool",
          "A testing framework"
        ],
        "answer": "A library for reactive programming using observables"
      },
      {
        "id": 8,
        "question": "Which lifecycle hook is called after Angular initializes the component's views and child views?",
        "options": [
          "ngOnChanges",
          "ngOnInit",
          "ngAfterViewInit",
          "ngDoCheck"
        ],
        "answer": "ngAfterViewInit"
      },
      {
        "id": 9,
        "question": "How can you pass data to a child component in Angular?",
        "options": [
          "Using an @Input decorator",
          "Using an @Output decorator",
          "Using a service",
          "Using an event emitter"
        ],
        "answer": "Using an @Input decorator"
      },
      {
        "id": 10,
        "question": "What is Angular's dependency injection?",
        "options": [
          "A technique to create singleton classes",
          "A method to handle HTTP requests",
          "A design pattern to manage dependencies between components",
          "A way to load modules asynchronously"
        ],
        "answer": "A design pattern to manage dependencies between components"
      },
      {
        "id": 11,
        "question": "Which command is used to create a new Angular project?",
        "options": [
          "ng new",
          "ng create",
          "ng init",
          "ng generate"
        ],
        "answer": "ng new"
      },
      {
        "id": 12,
        "question": "How do you handle forms in Angular?",
        "options": [
          "Using ngForm directive",
          "Using FormBuilder service",
          "Using template-driven forms and reactive forms",
          "Using ngSubmit directive"
        ],
        "answer": "Using template-driven forms and reactive forms"
      },
      {
        "id": 13,
        "question": "What is Angular's Router?",
        "options": [
          "A service that manages navigation between different components",
          "A directive for creating buttons",
          "A module for handling HTTP requests",
          "A tool for testing Angular applications"
        ],
        "answer": "A service that manages navigation between different components"
      },
      {
        "id": 14,
        "question": "What is the purpose of Angular Modules?",
        "options": [
          "To group related components, directives, pipes, and services",
          "To handle forms in Angular",
          "To manage the application's state",
          "To perform HTTP requests"
        ],
        "answer": "To group related components, directives, pipes, and services"
      },
      {
        "id": 15,
        "question": "Which of the following is an Angular structural directive?",
        "options": [
          "ngClass",
          "ngStyle",
          "ngIf",
          "ngModel"
        ],
        "answer": "ngIf"
      },
      {
      "id": 16,
        "question": "What is Change Detection in Angular and how does it work?",
        "options": [
          "A way to manually update the DOM",
          "A mechanism to track changes in component state and update the view accordingly",
          "A method to detect changes in user input",
          "A tool to manage state in Angular applications"
        ],
        "answer": "A mechanism to track changes in component state and update the view accordingly"
      },
      {
        "id": 17,
        "question": "What are Angular Zones and how do they relate to Change Detection?",
        "options": [
          "Zones are used to group related services together",
          "Zones track asynchronous operations and trigger change detection automatically",
          "Zones define the scope of a service",
          "Zones are used to handle HTTP requests"
        ],
        "answer": "Zones track asynchronous operations and trigger change detection automatically"
      },
      {
        "id": 18,
        "question": "How can you improve performance in an Angular application?",
        "options": [
          "By using the OnPush change detection strategy",
          "By avoiding the use of services",
          "By using template-driven forms only",
          "By disabling the Angular Router"
        ],
        "answer": "By using the OnPush change detection strategy"
      },
      {
        "id": 19,
        "question": "What is Lazy Loading in Angular?",
        "options": [
          "Loading services only when they are needed",
          "Loading components as the user scrolls down the page",
          "Loading modules on demand, rather than when the application starts",
          "Loading data from the server without reloading the page"
        ],
        "answer": "Loading modules on demand, rather than when the application starts"
      },
      {
        "id": 20,
        "question": "What is an Angular Resolver and when would you use it?",
        "options": [
          "A service that fetches data before a route is activated",
          "A tool to handle HTTP errors",
          "A method for resolving dependencies in Angular modules",
          "A directive to resolve conflicts between components"
        ],
        "answer": "A service that fetches data before a route is activated"
      },
      {
        "id": 21,
        "question": "How can you create a custom directive in Angular?",
        "options": [
          "By extending the Directive base class",
          "By creating a service that manipulates the DOM",
          "By using the @Directive decorator and implementing the required logic",
          "By using the @Component decorator with special syntax"
        ],
        "answer": "By using the @Directive decorator and implementing the required logic"
      },
      {
        "id": 22,
        "question": "What is the difference between a Service and a Factory in Angular?",
        "options": [
          "A Service is a class, whereas a Factory is a method that returns an object",
          "A Service handles HTTP requests, whereas a Factory manages state",
          "A Service is singleton by default, whereas a Factory can create multiple instances",
          "A Service is part of Angular Core, whereas a Factory is a third-party library"
        ],
        "answer": "A Service is a class, whereas a Factory is a method that returns an object"
      },
      {
        "id": 23,
        "question": "Explain the difference between Subject and BehaviorSubject in RxJS.",
        "options": [
          "Subject can emit and subscribe to values, BehaviorSubject cannot",
          "BehaviorSubject requires an initial value and emits the latest value to new subscribers, whereas Subject does not",
          "Subject is used for synchronous operations, BehaviorSubject is used for asynchronous operations",
          "BehaviorSubject can only be used with Angular services"
        ],
        "answer": "BehaviorSubject requires an initial value and emits the latest value to new subscribers, whereas Subject does not"
      },
      {
        "id": 24,
        "question": "How do you handle errors in an Angular application?",
        "options": [
          "Using try-catch blocks within components",
          "Using a global ErrorHandler service",
          "By displaying error messages directly in the template",
          "By using the HttpErrorResponse class"
        ],
        "answer": "Using a global ErrorHandler service"
      },
      {
        "id": 25,
        "question": "What are Angular Pipes and how do you create a custom pipe?",
        "options": [
          "Pipes are used to modify DOM elements, created using @Pipe decorator",
          "Pipes are used to transform data in templates, created using @Pipe decorator",
          "Pipes are used to handle HTTP requests, created using HttpClientModule",
          "Pipes are used for dependency injection, created using @Injectable decorator"
        ],
        "answer": "Pipes are used to transform data in templates, created using @Pipe decorator"
      },
      {
        "id": 26,
        "question": "How does Angular handle routing with multiple outlets?",
        "options": [
          "By defining multiple routerLink directives in the template",
          "By using named outlets in the route configuration",
          "By using the RouterModule twice in the app module",
          "By creating separate routing modules for each outlet"
        ],
        "answer": "By using named outlets in the route configuration"
      },
      {
        "id": 27,
        "question": "What is the role of NgModules in Angular, and how do they affect application structure?",
        "options": [
          "NgModules are used to group components, directives, and services that are related and can be lazy-loaded",
          "NgModules are used to create new services and inject them into components",
          "NgModules are a way to manage global variables in Angular",
          "NgModules are used to define Angular components only"
        ],
        "answer": "NgModules are used to group components, directives, and services that are related and can be lazy-loaded"
      },
      {
        "id": 28,
        "question": "What is ViewChild in Angular and how is it used?",
        "options": [
          "ViewChild is a service to manage views, used in Angular templates",
          "ViewChild is a decorator that provides access to a child component or directive within a parent component",
          "ViewChild is a directive for creating dynamic components",
          "ViewChild is a service for handling HTTP requests"
        ],
        "answer": "ViewChild is a decorator that provides access to a child component or directive within a parent component"
      },
      {
        "id": 29,
        "question": "How do you implement route guards in Angular?",
        "options": [
          "By using the @RouteGuard decorator in services",
          "By creating a service that implements CanActivate, CanDeactivate, or other guard interfaces",
          "By adding guard logic in the component's ngOnInit method",
          "By using the RouteGuardModule in the app module"
        ],
        "answer": "By creating a service that implements CanActivate, CanDeactivate, or other guard interfaces"
      },
      {
        "id": 30,
        "question": "What is Ahead-of-Time (AOT) compilation in Angular and why is it beneficial?",
        "options": [
          "AOT is a method of compiling TypeScript into JavaScript, which improves runtime performance",
          "AOT compiles Angular templates and TypeScript code into JavaScript during the build process, resulting in faster rendering and smaller bundle sizes",
          "AOT is a technique to optimize HTTP requests in Angular applications",
          "AOT is used to compile Angular applications directly in the browser"
        ],
        "answer": "AOT compiles Angular templates and TypeScript code into JavaScript during the build process, resulting in faster rendering and smaller bundle sizes"
      }
    ]
  }
}

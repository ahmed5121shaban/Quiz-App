{
  "quizCSharp": {
    "title": "C# Interview Questions",
    "image":"images/csharp-svgrepo-com.svg",
    "questions": [
      {
        "id": 1,
        "question": "What is C#?",
        "options": [
          "A database management system",
          "A programming language",
          "A front-end web framework",
          "An operating system"
        ],
        "answer": "A programming language"
      },
      {
        "id": 2,
        "question": "Which of the following is true about C#?",
        "options": [
          "It is a low-level programming language.",
          "It is a managed language that runs on the .NET framework.",
          "It is used primarily for web development.",
          "It does not support object-oriented programming."
        ],
        "answer": "It is a managed language that runs on the .NET framework."
      },
      {
        "id": 3,
        "question": "What is a class in C#?",
        "options": [
          "A template for creating objects that defines properties and methods",
          "A data structure used for sorting algorithms",
          "A method that performs a specific task",
          "A type of variable that holds multiple values"
        ],
        "answer": "A template for creating objects that defines properties and methods"
      },
      {
        "id": 4,
        "question": "What is an interface in C#?",
        "options": [
          "A class that provides a default implementation of methods",
          "A blueprint for classes that defines methods and properties without implementation",
          "A way to handle exceptions in code",
          "A type of loop structure used in C#"
        ],
        "answer": "A blueprint for classes that defines methods and properties without implementation"
      },
      {
        "id": 5,
        "question": "How do you define a method in C#?",
        "options": [
          "public int MethodName() { }",
          "int MethodName; { }",
          "void MethodName() { }",
          "method int MethodName() { }"
        ],
        "answer": "public int MethodName() { }"
      },
      {
        "id": 6,
        "question": "What is the purpose of the 'using' statement in C#?",
        "options": [
          "To include namespaces in the code",
          "To declare a variable",
          "To perform arithmetic operations",
          "To handle exceptions"
        ],
        "answer": "To include namespaces in the code"
      },
      {
        "id": 7,
        "question": "What is encapsulation in C#?",
        "options": [
          "The process of hiding the internal details of an object and exposing only what is necessary",
          "The ability of a method to operate on different types of data",
          "The creation of a new class from an existing class",
          "The process of using loops in programming"
        ],
        "answer": "The process of hiding the internal details of an object and exposing only what is necessary"
      },
      {
        "id": 8,
        "question": "Which of the following is true about inheritance in C#?",
        "options": [
          "Inheritance allows a class to inherit methods and properties from multiple classes.",
          "Inheritance allows a class to inherit methods and properties from another class.",
          "Inheritance is used to prevent the overriding of methods.",
          "Inheritance is only applicable to interfaces."
        ],
        "answer": "Inheritance allows a class to inherit methods and properties from another class."
      },
      {
        "id": 9,
        "question": "What is polymorphism in C#?",
        "options": [
          "The ability to define multiple classes with the same name",
          "The ability to process objects differently based on their data type or class",
          "The process of encapsulating data",
          "The ability to create an instance of a class"
        ],
        "answer": "The ability to process objects differently based on their data type or class"
      },
      {
        "id": 10,
        "question": "How do you handle exceptions in C#?",
        "options": [
          "Using the try-catch block",
          "Using if-else statements",
          "By returning null",
          "By using the switch-case block"
        ],
        "answer": "Using the try-catch block"
      },
      {
        "id": 11,
        "question": "What is an abstract class in C#?",
        "options": [
          "A class that cannot be instantiated and may contain abstract methods",
          "A class that cannot contain any methods",
          "A class that can only be used as a base class",
          "A class that must implement all methods of an interface"
        ],
        "answer": "A class that cannot be instantiated and may contain abstract methods"
      },
      {
        "id": 12,
        "question": "What is the purpose of the 'static' keyword in C#?",
        "options": [
          "To create an instance of a class",
          "To define a member that belongs to the class rather than any object instance",
          "To define a method that cannot return a value",
          "To define a variable that can be changed at runtime"
        ],
        "answer": "To define a member that belongs to the class rather than any object instance"
      },
      {
        "id": 13,
        "question": "What is a delegate in C#?",
        "options": [
          "A type that defines a method signature and can be used to reference methods with that signature",
          "A method that executes in the background",
          "A class that is used for exception handling",
          "A variable that holds a collection of values"
        ],
        "answer": "A type that defines a method signature and can be used to reference methods with that signature"
      },
      {
        "id": 14,
        "question": "What is LINQ in C#?",
        "options": [
          "A database management system",
          "A tool for debugging code",
          "A feature that provides query capabilities directly in C#",
          "A feature to handle asynchronous operations"
        ],
        "answer": "A feature that provides query capabilities directly in C#"
      },
      {
        "id": 15,
        "question": "What is the purpose of the 'yield' keyword in C#?",
        "options": [
          "To return a value from a method",
          "To iterate through a collection in a loop",
          "To return an enumerable collection one item at a time",
          "To define a constant value"
        ],
        "answer": "To return an enumerable collection one item at a time"
      },
      {
        "id": 16,
        "question": "What is an event in C#?",
        "options": [
          "A variable that holds a single value",
          "A mechanism that allows a class to notify other classes or objects when something happens",
          "A method that handles exceptions",
          "A way to define multiple constructors in a class"
        ],
        "answer": "A mechanism that allows a class to notify other classes or objects when something happens"
      },
      {
        "id": 17,
        "question": "What is the difference between an Array and a List in C#?",
        "options": [
          "An Array has a fixed size, while a List can dynamically resize.",
          "A List is a reference type, while an Array is a value type.",
          "Arrays can store only one type of data, while Lists can store multiple types.",
          "Lists can only store string data, while Arrays can store any data type."
        ],
        "answer": "An Array has a fixed size, while a List can dynamically resize."
      },
      {
        "id": 18,
        "question": "What is the purpose of the 'async' and 'await' keywords in C#?",
        "options": [
          "To manage memory in a program",
          "To handle multiple threads in an application",
          "To facilitate asynchronous programming and improve application responsiveness",
          "To define static methods in a class"
        ],
        "answer": "To facilitate asynchronous programming and improve application responsiveness"
      },
      {
        "id": 19,
        "question": "What is the .NET framework?",
        "options": [
          "A runtime environment for executing C# code",
          "A front-end framework for web development",
          "A language for creating database applications",
          "A tool for managing source code"
        ],
        "answer": "A runtime environment for executing C# code"
      },
      {
        "id": 20,
        "question": "How do you create a property in C#?",
        "options": [
          "public int MyProperty { get; set; }",
          "int MyProperty() { get; set; }",
          "public int MyProperty = 0;",
          "int MyProperty { }"
        ],
        "answer": "public int MyProperty { get; set; }"
      },
      {
        "id": 21,
        "question": "What is garbage collection in C#?",
        "options": [
          "The process of manually freeing up memory",
          "A feature that automatically releases memory occupied by objects that are no longer in use",
          "A method to collect unused variables",
          "A way to recycle old code in a program"
        ],
        "answer": "A feature that automatically releases memory occupied by objects that are no longer in use"
      },
      {
        "id": 22,
        "question": "What is a nullable type in C#?",
        "options": [
          "A type that can only store null values",
          "A value type that can also represent a null value",
          "A reference type that cannot be null",
          "A type that automatically frees memory"
        ],
        "answer": "A value type that can also represent a null value"
      },
      {
        "id": 23,
        "question": "What is the difference between '==' and 'Equals()' in C#?",
        "options": [
          "'==' compares object references, while 'Equals()' compares object values",
          "'==' compares object values, while 'Equals()' compares object references",
          "'==' is used for comparison in if statements only",
          "'Equals()' is used for comparing integers only"
        ],
        "answer": "'==' compares object references, while 'Equals()' compares object values"
      },
      {
        "id": 24,
        "question": "What is a sealed class in C#?",
        "options": [
          "A class that cannot be instantiated",
          "A class that cannot be inherited",
          "A class that can only be used internally",
          "A class that is automatically destroyed by the garbage collector"
        ],
        "answer": "A class that cannot be inherited"
      },
      {
        "id": 25,
        "question": "What is the purpose of the 'virtual' keyword in C#?",
        "options": [
          "To define a method that can be overridden in a derived class",
          "To create a copy of a method",
          "To declare a variable with a dynamic type",
          "To prevent a method from being inherited"
        ],
        "answer": "To define a method that can be overridden in a derived class"
      },
      {
        "id": 26,
        "question": "How do you implement a singleton pattern in C#?",
        "options": [
          "By creating a class with a private constructor and a public static method that returns an instance",
          "By creating a class with multiple constructors",
          "By using the 'static' keyword for all methods in the class",
          "By inheriting from the Singleton base class"
        ],
        "answer": "By creating a class with a private constructor and a public static method that returns an instance"
      },
      {
        "id": 27,
        "question": "What is the difference between 'ref' and 'out' parameters in C#?",
        "options": [
          "'ref' requires the parameter to be initialized before passing, 'out' does not",
          "'ref' can only be used with value types, 'out' can be used with reference types",
          "'out' can return multiple values, 'ref' can only return one",
          "'ref' is used in constructors, 'out' is used in methods"
        ],
        "answer": "'ref' requires the parameter to be initialized before passing, 'out' does not"
      },
      {
        "id": 28,
        "question": "What is the purpose of the 'lock' statement in C#?",
        "options": [
          "To prevent a variable from being modified",
          "To restrict access to a resource in a multithreaded environment",
          "To lock a method so it cannot be overridden",
          "To make a class immutable"
        ],
        "answer": "To restrict access to a resource in a multithreaded environment"
      },
      {
        "id": 29,
        "question": "What is the difference between synchronous and asynchronous programming in C#?",
        "options": [
          "Synchronous programming blocks the execution until the task completes, while asynchronous programming allows the application to continue executing while the task completes",
          "Synchronous programming is faster than asynchronous programming",
          "Asynchronous programming can only be used with HTTP requests",
          "Synchronous programming can only be used in console applications"
        ],
        "answer": "Synchronous programming blocks the execution until the task completes, while asynchronous programming allows the application to continue executing while the task completes"
      },
      {
        "id": 30,
        "question": "What is reflection in C#?",
        "options": [
          "The ability to inspect and interact with an object's metadata at runtime",
          "A way to create new objects dynamically",
          "A method to optimize code execution",
          "A process to manage memory"
        ],
        "answer": "The ability to inspect and interact with an object's metadata at runtime"
      },
      {
        "id": 31,
        "question": "What is the purpose of the 'readonly' keyword in C#?",
        "options": [
          "To define a variable that can only be set during declaration or in the constructor",
          "To define a variable that cannot be changed after the initial assignment",
          "To make a method accessible only within the class",
          "To create an immutable class"
        ],
        "answer": "To define a variable that can only be set during declaration or in the constructor"
      },
      {
        "id": 32,
        "question": "What is an extension method in C#?",
        "options": [
          "A method that extends the functionality of an existing type without modifying its source code",
          "A method that can be called on any object",
          "A method used to extend the size of an array",
          "A method used to manage exceptions"
        ],
        "answer": "A method that extends the functionality of an existing type without modifying its source code"
      },
      {
        "id": 33,
        "question": "What is the difference between an abstract class and an interface in C#?",
        "options": [
          "An abstract class can provide a default implementation, while an interface cannot",
          "An interface can only contain methods, while an abstract class can contain fields and methods",
          "An abstract class can only be inherited once, while an interface can be implemented multiple times",
          "An interface is used for data encapsulation, while an abstract class is used for inheritance"
        ],
        "answer": "An abstract class can provide a default implementation, while an interface cannot"
      },
      {
        "id": 34,
        "question": "What is a tuple in C#?",
        "options": [
          "A data structure that can hold a fixed number of items of different types",
          "A collection that stores only unique values",
          "A way to store key-value pairs",
          "A type of loop used for iterating through collections"
        ],
        "answer": "A data structure that can hold a fixed number of items of different types"
      },
      {
        "id": 35,
        "question": "What is the purpose of the 'base' keyword in C#?",
        "options": [
          "To refer to the parent class constructor or methods in a derived class",
          "To create a new instance of a class",
          "To define a base value for numeric calculations",
          "To access static members of a class"
        ],
        "answer": "To refer to the parent class constructor or methods in a derived class"
      },
      {
        "id": 36,
        "question": "What is dependency injection in C#?",
        "options": [
          "A design pattern for implementing inversion of control, allowing objects to receive their dependencies from an external source",
          "A method to inject data into a database",
          "A technique to handle exceptions in a program",
          "A way to manage threads in a multithreaded application"
        ],
        "answer": "A design pattern for implementing inversion of control, allowing objects to receive their dependencies from an external source"
      },
      {
        "id": 37,
        "question": "What is the difference between IEnumerable and IQueryable in C#?",
        "options": [
          "IEnumerable is used for in-memory collections, while IQueryable is used for querying data from databases",
          "IQueryable is faster than IEnumerable",
          "IEnumerable can be used for both synchronous and asynchronous operations, while IQueryable cannot",
          "IEnumerable is used only in LINQ to XML, while IQueryable is used in LINQ to SQL"
        ],
        "answer": "IEnumerable is used for in-memory collections, while IQueryable is used for querying data from databases"
      },
      {
        "id": 38,
        "question": "How do you implement multiple inheritance in C#?",
        "options": [
          "C# does not support multiple inheritance directly, but it can be achieved using interfaces",
          "By inheriting from multiple classes",
          "By using the 'multi' keyword in the class definition",
          "By creating multiple constructors in a class"
        ],
        "answer": "C# does not support multiple inheritance directly, but it can be achieved using interfaces"
      },
      {
        "id": 39,
        "question": "What is async-await in C# and when would you use it?",
        "options": [
          "A mechanism for handling asynchronous operations without blocking the main thread, used to improve application responsiveness",
          "A method for parallel processing of tasks",
          "A way to manage memory efficiently",
          "A technique to execute code in the background"
        ],
        "answer": "A mechanism for handling asynchronous operations without blocking the main thread, used to improve application responsiveness"
      }
    ]
  }
}
